<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432771125452">{:repl-history {:ide [], :local [&quot;(+ 4 5)&quot; &quot;{:app/title {:db/valueType :db.type/string\n                            :db/cardinality :db.cardinality/one}\n                :app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}\n                :state/count {:db/valueType :db.type/float\n                              :db/cardinality :db.cardinality/one}}&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1 \n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    )&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1\n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    (d/q '[:find (pull ?e [:app/title {:app/state [:state/count]}])\n           :where [?e :app/title]]\n      @conn))&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn   (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1\n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    (d/q '[:find (pull ?e [:app/title {:app/state [:state/count]}])\n           :where [?e :app/title]]\n      @conn))&quot; &quot;(time\n    (dotimes [_ 10]\n     (let [schema {:app/state {:db/valueType :db.type/ref\n                               :db/cardinality :db.cardinality/many\n                               :db/isComponent true}}\n           conn (d/create-conn schema)]\n       (d/transact! conn\n         [{:db/id -1\n           :app/title \&quot;Hello, World!\&quot;\n           :app/state [{:state/count 0}\n                       {:state/count 0}\n                       {:state/count 0}]}])\n       (d/q '[:find (pull ?e [:app/title {:app/state [:state/count]}])\n              :where [?e :app/title]]\n         @conn))))&quot; &quot;(time\n    (dotimes [_ 100]\n     (let [schema {:app/state {:db/valueType :db.type/ref\n                               :db/cardinality :db.cardinality/many\n                               :db/isComponent true}}\n           conn (d/create-conn schema)]\n       (d/transact! conn\n         [{:db/id -1\n           :app/title \&quot;Hello, World!\&quot;\n           :app/state [{:state/count 0}\n                       {:state/count 0}\n                       {:state/count 0}]}])\n       (d/q '[:find (pull ?e [:app/title {:app/state [:state/count]}])\n              :where [?e :app/title]]\n         @conn))))&quot; &quot;(time\n    (dotimes [_ 1000]\n     (let [schema {:app/state {:db/valueType :db.type/ref\n                               :db/cardinality :db.cardinality/many\n                               :db/isComponent true}}\n           conn (d/create-conn schema)]\n       (d/transact! conn\n         [{:db/id -1\n           :app/title \&quot;Hello, World!\&quot;\n           :app/state [{:state/count 0}\n                       {:state/count 0}\n                       {:state/count 0}]}])\n       (d/q '[:find (pull ?e [:app/title {:app/state [:state/count]}])\n              :where [?e :app/title]]\n         @conn))))&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1\n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    (DataScriptStore. @conn conn))&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1\n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    (p/pull (DataScriptStore. @conn conn)\n      {:app/root [:app/title {:app/state [:state/count]}]}))&quot; &quot;(let [schema {:app/state {:db/valueType :db.type/ref\n                            :db/cardinality :db.cardinality/many\n                            :db/isComponent true}}\n        conn (d/create-conn schema)]\n    (d/transact! conn\n      [{:db/id -1\n        :app/title \&quot;Hello, World!\&quot;\n        :app/state [{:state/count 0}\n                    {:state/count 0}\n                    {:state/count 0}]}])\n    (p/pull (DataScriptStore. @conn conn)\n      {:app/root [:app/title {:app/state [:state/count]}]}\n      nil))&quot; &quot;(om/query HelloWorld)&quot; &quot;(ffirst (om/query HelloWorld))&quot; &quot;(-&gt; (om/query HelloWorld) second)&quot; &quot;(-&gt; (om/query HelloWorld) first second)&quot; &quot;(conj (-&gt; (om/query HelloWorld) first second) :db/id)&quot; &quot;(main)&quot;], :remote []}}</component>
</project>