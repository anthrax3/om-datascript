;; Analyzed by ClojureScript 0.0-3299
{:use-macros nil, :excludes #{}, :name om.next.stores, :imports nil, :requires {gobj goog.object, goog.object goog.object, p om.next.protocols, om.next.protocols om.next.protocols}, :uses nil, :defs {tree-pull {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/om/next/stores.cljs", :line 5, :column 7, :end-line 5, :end-column 16, :arglists (quote ([m sel]))}, :name om.next.stores/tree-pull, :variadic false, :file "resources/out/om/next/stores.cljs", :end-column 16, :method-params ([m sel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m sel]))}, TreeStore {:num-fields 2, :protocols #{om.next.protocols/IStore om.next.protocols/IPush cljs.core/IPrintWithWriter om.next.protocols/IPull}, :name om.next.stores/TreeStore, :file "resources/out/om/next/stores.cljs", :end-column 19, :type true, :column 10, :line 42, :record false, :end-line 42, :skip-protocol-flag #{cljs.core/IPrintWithWriter}}, ->TreeStore {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/om/next/stores.cljs", :line 42, :column 10, :end-line 42, :end-column 19, :protocols #{om.next.protocols/IStore om.next.protocols/IPush cljs.core/IPrintWithWriter om.next.protocols/IPull}, :skip-protocol-flag #{cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([data index]))}, :protocols #{om.next.protocols/IStore om.next.protocols/IPush cljs.core/IPrintWithWriter om.next.protocols/IPull}, :name om.next.stores/->TreeStore, :variadic false, :file "resources/out/om/next/stores.cljs", :end-column 19, :method-params ([data index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data index])), :skip-protocol-flag #{cljs.core/IPrintWithWriter}}, table-pull {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/om/next/stores.cljs", :line 67, :column 7, :end-line 67, :end-column 17, :arglists (quote ([m selector ctxt]))}, :name om.next.stores/table-pull, :variadic false, :file "resources/out/om/next/stores.cljs", :end-column 17, :method-params ([m selector ctxt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m selector ctxt]))}, TableStore {:num-fields 1, :protocols #{om.next.protocols/IPush}, :name om.next.stores/TableStore, :file "resources/out/om/next/stores.cljs", :end-column 20, :type true, :column 10, :line 69, :record false, :end-line 69, :skip-protocol-flag nil}, ->TableStore {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/om/next/stores.cljs", :line 69, :column 10, :end-line 69, :end-column 20, :protocols #{om.next.protocols/IPush}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([data]))}, :protocols #{om.next.protocols/IPush}, :name om.next.stores/->TableStore, :variadic false, :file "resources/out/om/next/stores.cljs", :end-column 20, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :skip-protocol-flag nil}, RemoteStore {:num-fields 3, :protocols #{om.next.protocols/IPushAsync}, :name om.next.stores/RemoteStore, :file "resources/out/om/next/stores.cljs", :end-column 21, :type true, :column 10, :line 74, :record false, :end-line 74, :skip-protocol-flag nil}, ->RemoteStore {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/om/next/stores.cljs", :line 74, :column 10, :end-line 74, :end-column 21, :protocols #{om.next.protocols/IPushAsync}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([data fetch local-keys]))}, :protocols #{om.next.protocols/IPushAsync}, :name om.next.stores/->RemoteStore, :variadic false, :file "resources/out/om/next/stores.cljs", :end-column 21, :method-params ([data fetch local-keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data fetch local-keys])), :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :error/invalid-selector-fragment :error/invalid-tree-pull-value :type :error/invalid-key :component->path}, :order [:type :error/invalid-key :else :error/invalid-tree-pull-value :error/invalid-selector-fragment :component->path]}, :doc nil}