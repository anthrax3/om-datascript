;; Analyzed by ClojureScript 0.0-3299
{:use-macros {defui om.next}, :excludes #{}, :name om-datascript.core, :imports nil, :requires {goog.dom goog.dom, p om.next.protocols, dom om.dom, clojure.browser.repl clojure.browser.repl, om.dom om.dom, gobj goog.object, datascript datascript, goog.object goog.object, om.next.protocols om.next.protocols, cljs.pprint cljs.pprint, gdom goog.dom, om om.next, om.next om.next, repl clojure.browser.repl, d datascript}, :uses {pprint cljs.pprint}, :defs {main {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 85, :column 7, :end-line 85, :end-column 11, :arglists (quote ([]))}, :name om-datascript.core/main, :variadic false, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, DataScriptStore {:num-fields 2, :protocols #{om.next.protocols/IStore om.next.protocols/IPush om.next.protocols/IPull}, :name om-datascript.core/DataScriptStore, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 25, :type true, :column 10, :line 23, :record false, :end-line 23, :skip-protocol-flag nil}, repl-conn {:name om-datascript.core/repl-conn, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 11, :column 1, :end-line 11, :end-column 19, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 11, :column 10, :end-line 11, :end-column 19}}, conn {:name om-datascript.core/conn, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 74, :column 1, :end-line 74, :end-column 10, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 74, :column 6, :end-line 74, :end-column 10}}, schema {:name om-datascript.core/schema, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 69, :column 1, :end-line 69, :end-column 12, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 69, :column 6, :end-line 69, :end-column 12}}, store {:name om-datascript.core/store, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 83, :column 1, :end-line 83, :end-column 11, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 83, :column 6, :end-line 83, :end-column 11}}, ds-query {:name om-datascript.core/ds-query, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 14, :column 1, :end-line 14, :end-column 19, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 14, :column 11, :end-line 14, :end-column 19}}, HelloWorld {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 55, :column 8, :end-line 55, :end-column 18, :arglists (quote ([]))}, :name om-datascript.core/HelloWorld, :variadic false, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->DataScriptStore {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 23, :column 10, :end-line 23, :end-column 25, :protocols #{om.next.protocols/IStore om.next.protocols/IPush om.next.protocols/IPull}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([db conn]))}, :protocols #{om.next.protocols/IStore om.next.protocols/IPush om.next.protocols/IPull}, :name om-datascript.core/->DataScriptStore, :variadic false, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 25, :method-params ([db conn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db conn])), :skip-protocol-flag nil}, counter {:name om-datascript.core/counter, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 53, :column 1, :end-line 53, :end-column 13, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 53, :column 6, :end-line 53, :end-column 13}}, increment! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 36, :column 7, :end-line 36, :end-column 17, :arglists (quote ([c props]))}, :name om-datascript.core/increment!, :variadic false, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 17, :method-params ([c props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c props]))}, Counter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :line 40, :column 8, :end-line 40, :end-column 15, :arglists (quote ([]))}, :name om-datascript.core/Counter, :variadic false, :file "/Users/davidnolen/development/clojure/om-datascript/src/om_datascript/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:find :where :react-key :state/count :default :db/valueType :db.type/ref :db/isComponent :app/state :app/title :counter :app/root :db/cardinality :db/id :target :db.cardinality/many :hierarchy :in}, :order [:hierarchy :default :app/root :find :in :where :app/title :db/id :state/count :app/state :react-key :counter :db/valueType :db/cardinality :db/isComponent :db.type/ref :db.cardinality/many :target]}, :doc nil}