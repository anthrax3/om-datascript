;; Analyzed by ClojureScript 0.0-3299
{:use-macros nil, :excludes #{}, :name datascript.pull-api, :imports nil, :requires {dc datascript.core, datascript.core datascript.core, dpp datascript.pull-parser, datascript.pull-parser datascript.pull-parser}, :uses {PullSpec datascript.pull-parser}, :defs {push-recursion {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 40, :column 8, :end-line 40, :end-column 22, :private true, :arglists (quote ([rec attr eid]))}, :private true, :name datascript.pull-api/push-recursion, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 22, :method-params ([rec attr eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rec attr eid]))}, pull-expand-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 186, :column 8, :end-line 186, :end-column 25, :private true, :arglists (quote ([db [frame & frames]]))}, :private true, :name datascript.pull-api/pull-expand-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 25, :method-params ([db p__11267]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [frame & frames]]))}, pull {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 268, :column 7, :end-line 268, :end-column 11, :arglists (quote ([db selector eid]))}, :name datascript.pull-api/pull, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 11, :method-params ([db selector eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db selector eid]))}, recursion-result {:name datascript.pull-api/recursion-result, :file "resources/out/datascript/pull_api.cljc", :line 62, :column 1, :end-line 62, :end-column 32, :private true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 62, :column 16, :end-line 62, :end-column 32, :private true}}, single-frame-result {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 58, :column 8, :end-line 58, :end-column 27, :private true, :arglists (quote ([key frame]))}, :private true, :name datascript.pull-api/single-frame-result, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 27, :method-params ([key frame]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key frame]))}, pull-expand-reverse-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 180, :column 8, :end-line 180, :end-column 33, :private true, :arglists (quote ([db [frame & frames]]))}, :private true, :name datascript.pull-api/pull-expand-reverse-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 33, :method-params ([db p__11264]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [frame & frames]]))}, pull-attr-datoms {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 106, :column 8, :end-line 106, :end-column 24, :private true, :arglists (quote ([db attr-key attr eid forward? datoms opts [parent & frames]]))}, :private true, :name datascript.pull-api/pull-attr-datoms, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 24, :method-params ([db attr-key attr eid forward? datoms opts p__11249]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 8, :fn-var true, :arglists (quote ([db attr-key attr eid forward? datoms opts [parent & frames]]))}, pull-many {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 272, :column 7, :end-line 272, :end-column 16, :arglists (quote ([db selector eids]))}, :name datascript.pull-api/pull-many, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 16, :method-params ([db selector eids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db selector eids]))}, pull-pattern-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 225, :column 8, :end-line 225, :end-column 26, :private true, :arglists (quote ([db [frame & frames]]))}, :private true, :name datascript.pull-api/pull-pattern-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 26, :method-params ([db p__11279]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [frame & frames]]))}, pull-wildcard-expand {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 207, :column 8, :end-line 207, :end-column 28, :private true, :arglists (quote ([db frame frames eid pattern]))}, :private true, :name datascript.pull-api/pull-wildcard-expand, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 28, :method-params ([db frame frames eid pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 5, :fn-var true, :arglists (quote ([db frame frames eid pattern]))}, expand-reverse-subpattern-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 167, :column 8, :end-line 167, :end-column 39, :private true, :arglists (quote ([parent eid rattrs]))}, :private true, :name datascript.pull-api/expand-reverse-subpattern-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 39, :method-params ([parent eid rattrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent eid rattrs]))}, pull-attr {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 148, :column 8, :end-line 148, :end-column 17, :private true, :arglists (quote ([db spec eid frames]))}, :private true, :name datascript.pull-api/pull-attr, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 17, :method-params ([db spec eid frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db spec eid frames]))}, recurse-attr {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 84, :column 8, :end-line 84, :end-column 20, :private true, :arglists (quote ([db attr multi? eids eid parent frames]))}, :private true, :name datascript.pull-api/recurse-attr, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 20, :method-params ([db attr multi? eids eid parent frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 7, :fn-var true, :arglists (quote ([db attr multi? eids eid parent frames]))}, pull-wildcard {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 219, :column 8, :end-line 219, :end-column 21, :private true, :arglists (quote ([db frame frames]))}, :private true, :name datascript.pull-api/pull-wildcard, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 21, :method-params ([db frame frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db frame frames]))}, into! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 7, :column 8, :end-line 7, :end-column 13, :private true, :arglists (quote ([transient-coll items]))}, :private true, :name datascript.pull-api/into!, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 13, :method-params ([transient-coll items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transient-coll items]))}, expand-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 99, :column 10, :end-line 99, :end-column 22, :private true, :arglists (quote ([parent eid attr-key multi? eids]))}, :private true, :name datascript.pull-api/expand-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 22, :method-params ([parent eid attr-key multi? eids]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 99, :end-line 99, :max-fixed-arity 5, :fn-var true, :arglists (quote ([parent eid attr-key multi? eids]))}, pull-spec {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 263, :column 7, :end-line 263, :end-column 16, :arglists (quote ([db pattern eids multi?]))}, :name datascript.pull-api/pull-spec, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 16, :method-params ([db pattern eids multi?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db pattern eids multi?]))}, pull-pattern {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 246, :column 8, :end-line 246, :end-column 20, :private true, :arglists (quote ([db frames]))}, :private true, :name datascript.pull-api/pull-pattern, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 20, :method-params ([db frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db frames]))}, expand-result {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 173, :column 8, :end-line 173, :end-column 21, :private true, :arglists (quote ([frames kvps]))}, :private true, :name datascript.pull-api/expand-result, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 21, :method-params ([frames kvps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([frames kvps]))}, recursion-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 65, :column 8, :end-line 65, :end-column 23, :private true, :arglists (quote ([parent eid]))}, :private true, :name datascript.pull-api/recursion-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 23, :method-params ([parent eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent eid]))}, reset-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 29, :column 8, :end-line 29, :end-column 19, :private true, :arglists (quote ([frame eids kvps]))}, :private true, :name datascript.pull-api/reset-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 19, :method-params ([frame eids kvps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([frame eids kvps]))}, pull-seen-eid {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 53, :column 8, :end-line 53, :end-column 21, :private true, :arglists (quote ([frame frames eid]))}, :private true, :name datascript.pull-api/pull-seen-eid, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 21, :method-params ([frame frames eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([frame frames eid]))}, initial-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 13, :column 8, :end-line 13, :end-column 21, :private true, :arglists (quote ([pattern eids multi?]))}, :private true, :name datascript.pull-api/initial-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 21, :method-params ([pattern eids multi?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pattern eids multi?]))}, pull-recursion-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 72, :column 8, :end-line 72, :end-column 28, :private true, :arglists (quote ([db [frame & frames]]))}, :private true, :name datascript.pull-api/pull-recursion-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 28, :method-params ([db p__11238]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [frame & frames]]))}, +default-limit+ {:name datascript.pull-api/+default-limit+, :file "resources/out/datascript/pull_api.cljc", :line 11, :column 1, :end-line 11, :end-column 39, :const true, :private true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 11, :column 24, :end-line 11, :end-column 39, :const true, :private true}}, seen-eid? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 47, :column 8, :end-line 47, :end-column 17, :private true, :arglists (quote ([frame eid]))}, :private true, :name datascript.pull-api/seen-eid?, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 17, :method-params ([frame eid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([frame eid]))}, subpattern-frame {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 25, :column 8, :end-line 25, :end-column 24, :private true, :arglists (quote ([pattern eids multi? attr]))}, :private true, :name datascript.pull-api/subpattern-frame, :variadic false, :file "resources/out/datascript/pull_api.cljc", :end-column 24, :method-params ([pattern eids multi? attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pattern eids multi? attr]))}, filter-reverse-attrs {:name datascript.pull-api/filter-reverse-attrs, :file "resources/out/datascript/pull_api.cljc", :line 164, :column 1, :end-line 164, :end-column 36, :private true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/pull_api.cljc", :line 164, :column 16, :end-line 164, :end-column 36, :private true}}}, :require-macros {dc datascript.core, datascript.core datascript.core}, :cljs.analyzer/constants {:seen #{:expand-kvps :datascript.pull-api/expand-rev :multi? :done :limit :else :default :avet :datascript.pull-api/recursion :expand-rev :eids :state :eavt :recursion :seen :specs :db/id :attrs :subpattern :depth :eid :wildcard? :expand :kvps :datoms :pattern :attr :results}, :order [:multi? :eids :state :recursion :specs :wildcard? :kvps :pattern :results :depth :seen :attrs :attr :db/id :datascript.pull-api/recursion :done :limit :subpattern :else :default :eavt :avet :datascript.pull-api/expand-rev :expand-kvps :datoms :eid :expand-rev :expand]}, :doc nil}