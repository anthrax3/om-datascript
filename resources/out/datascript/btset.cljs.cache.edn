;; Analyzed by ClojureScript 0.0-3299
{:use-macros nil, :excludes #{}, :name datascript.btset, :imports nil, :requires nil, :uses nil, :defs {-next-path {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 402, :column 7, :end-line 402, :end-column 17, :arglists (quote ([node path level]))}, :name datascript.btset/-next-path, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 17, :method-params ([node path level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node path level]))}, LeafNode {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 35, :column 21, :end-line 35, :end-column 29, :declared true}, :num-fields 1, :protocols #{datascript.btset/Object}, :name datascript.btset/LeafNode, :file "resources/out/datascript/btset.cljs", :end-column 18, :type true, :column 10, :line 298, :record false, :declared true, :end-line 298, :skip-protocol-flag nil}, alast {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 99, :column 7, :end-line 99, :end-column 12, :arglists (quote ([arr]))}, :name datascript.btset/alast, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 12, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr]))}, distance {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 485, :column 7, :end-line 485, :end-column 15, :arglists (quote ([set path-l path-r]))}, :name datascript.btset/distance, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 15, :method-params ([set path-l path-r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set path-l path-r]))}, path-get {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([path level]))}, :name datascript.btset/path-get, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 15, :method-params ([path level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path level]))}, min-len {:name datascript.btset/min-len, :file "resources/out/datascript/btset.cljs", :line 40, :column 1, :end-line 40, :end-column 21, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 40, :column 14, :end-line 40, :end-column 21, :const true}}, -rseek {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 620, :column 7, :end-line 620, :end-column 13, :arglists (quote ([set key])), :doc "Returns path to the first element that is > key.\n   If all elements in a set are <= key, returns `(-rpath set) + 1`.\n   It’s a virtual path that is bigger than any path in a tree"}, :name datascript.btset/-rseek, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([set key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 620, :end-line 620, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set key])), :doc "Returns path to the first element that is > key.\n   If all elements in a set are <= key, returns `(-rpath set) + 1`.\n   It’s a virtual path that is bigger than any path in a tree"}, -seek {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 603, :column 7, :end-line 603, :end-column 12, :arglists (quote ([set key])), :doc "Returns path to first element >= key,\n   or -1 if all elements in a set < key"}, :name datascript.btset/-seek, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 12, :method-params ([set key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set key])), :doc "Returns path to first element >= key,\n   or -1 if all elements in a set < key"}, BTSet {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 35, :column 10, :end-line 35, :end-column 15, :declared true}, :num-fields 6, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection datascript.btset/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}, :name datascript.btset/BTSet, :file "resources/out/datascript/btset.cljs", :end-column 15, :type true, :column 10, :line 655, :record false, :declared true, :end-line 655, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}}, btset-disj {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 379, :column 7, :end-line 379, :end-column 17, :arglists (quote ([set key cmp]))}, :name datascript.btset/btset-disj, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 17, :method-params ([set key cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set key cmp]))}, cut {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 117, :column 7, :end-line 117, :end-column 10, :arglists (quote ([arr cut-from] [arr cut-from cut-to])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([arr cut-from] [arr cut-from cut-to]), :arglists ([arr cut-from] [arr cut-from cut-to]), :arglists-meta (nil nil)}}, :name datascript.btset/cut, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([arr cut-from] [arr cut-from cut-to]), :arglists ([arr cut-from] [arr cut-from cut-to]), :arglists-meta (nil nil)}, :method-params ([arr cut-from] [arr cut-from cut-to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists ([arr cut-from] [arr cut-from cut-to])}, keys-for {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 348, :column 7, :end-line 348, :end-column 15, :arglists (quote ([set path]))}, :name datascript.btset/keys-for, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 15, :method-params ([set path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set path]))}, -slice {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 638, :column 7, :end-line 638, :end-column 13, :arglists (quote ([set key-from key-to]))}, :name datascript.btset/-slice, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([set key-from key-to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 638, :end-line 638, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set key-from key-to]))}, max-len {:name datascript.btset/max-len, :file "resources/out/datascript/btset.cljs", :line 41, :column 1, :end-line 41, :end-column 21, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 41, :column 14, :end-line 41, :end-column 21, :const true}}, btset {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 743, :column 7, :end-line 743, :end-column 12, :arglists (quote ([] [& keys])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keys]), :arglists-meta (nil nil)}}, :name datascript.btset/btset, :variadic true, :file "resources/out/datascript/btset.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keys]), :arglists-meta (nil nil)}, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 743, :end-line 743, :max-fixed-arity 0, :fn-var true, :arglists ([] [& keys])}, -rpath {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 429, :column 7, :end-line 429, :end-column 13, :arglists (quote ([node level])), :doc "Returns rightmost path possible starting from node and going deeper"}, :name datascript.btset/-rpath, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([node level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node level])), :doc "Returns rightmost path possible starting from node and going deeper"}, btset-by {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 738, :column 7, :end-line 738, :end-column 15, :arglists (quote ([cmp] [cmp & keys])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cmp]), :arglists ([cmp] [cmp & keys]), :arglists-meta (nil nil)}}, :name datascript.btset/btset-by, :variadic true, :file "resources/out/datascript/btset.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cmp]), :arglists ([cmp] [cmp & keys]), :arglists-meta (nil nil)}, :method-params ([cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 738, :end-line 738, :max-fixed-arity 1, :fn-var true, :arglists ([cmp] [cmp & keys])}, eq-arr {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 144, :column 16, :end-line 144, :end-column 22, :tag boolean, :arglists (quote ([a1 a1-from a1-to a2 a2-from a2-to cmp]))}, :name datascript.btset/eq-arr, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 22, :method-params ([a1 a1-from a1-to a2 a2-from a2-to cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :ret-tag boolean, :end-line 144, :max-fixed-arity 7, :tag boolean, :fn-var true, :arglists (quote ([a1 a1-from a1-to a2 a2-from a2-to cmp]))}, -prev-path {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 441, :column 7, :end-line 441, :end-column 17, :arglists (quote ([node path level]))}, :name datascript.btset/-prev-path, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 17, :method-params ([node path level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 441, :end-line 441, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node path level]))}, -btset-from-seq {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 734, :column 7, :end-line 734, :end-column 22, :arglists (quote ([seq cmp]))}, :name datascript.btset/-btset-from-seq, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 22, :method-params ([seq cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 734, :end-line 734, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seq cmp]))}, merge-n-split {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 129, :column 7, :end-line 129, :end-column 20, :arglists (quote ([a1 a2]))}, :name datascript.btset/merge-n-split, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 20, :method-params ([a1 a2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a1 a2]))}, lim-key {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 210, :column 7, :end-line 210, :end-column 14, :arglists (quote ([node]))}, :name datascript.btset/lim-key, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 14, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, insert {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 126, :column 7, :end-line 126, :end-column 13, :arglists (quote ([arr idx xs]))}, :name datascript.btset/insert, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([arr idx xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr idx xs]))}, arr-distinct {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 194, :column 8, :end-line 194, :end-column 20, :private true, :arglists (quote ([arr cmp])), :doc "Filter out repetitive values in a sorted array"}, :private true, :name datascript.btset/arr-distinct, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 20, :method-params ([arr cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr cmp])), :doc "Filter out repetitive values in a sorted array"}, level-shift {:name datascript.btset/level-shift, :file "resources/out/datascript/btset.cljs", :line 43, :column 1, :end-line 43, :end-column 25, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 43, :column 14, :end-line 43, :end-column 25, :const true}}, splice {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 123, :column 7, :end-line 123, :end-column 13, :arglists (quote ([arr splice-from splice-to xs]))}, :name datascript.btset/splice, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([arr splice-from splice-to xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 4, :fn-var true, :arglists (quote ([arr splice-from splice-to xs]))}, eq {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 59, :column 7, :end-line 59, :end-column 9, :arglists (quote ([a b]))}, :name datascript.btset/eq, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 9, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, -btset-backwards-iter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 592, :column 7, :end-line 592, :end-column 28, :arglists (quote ([set left right]))}, :name datascript.btset/-btset-backwards-iter, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 28, :method-params ([set left right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 592, :end-line 592, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set left right]))}, next-path {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 423, :column 7, :end-line 423, :end-column 16, :arglists (quote ([set path])), :doc "Returns path representing next item after `path` in natural traversal order,\n   or -1 if end of tree has been reached"}, :name datascript.btset/next-path, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 16, :method-params ([set path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set path])), :doc "Returns path representing next item after `path` in natural traversal order,\n   or -1 if end of tree has been reached"}, binary-search-r {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 72, :column 7, :end-line 72, :end-column 22, :arglists (quote ([arr l r k]))}, :name datascript.btset/binary-search-r, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 22, :method-params ([arr l r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 4, :fn-var true, :arglists (quote ([arr l r k]))}, prev-path {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 465, :column 7, :end-line 465, :end-column 16, :arglists (quote ([set path])), :doc "Returns path representing previous item before `path` in natural traversal order,\n   or -1 if `path` was already beginning of a tree"}, :name datascript.btset/prev-path, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 16, :method-params ([set path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set path])), :doc "Returns path representing previous item before `path` in natural traversal order,\n   or -1 if `path` was already beginning of a tree"}, ->BTSetIter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 497, :column 10, :end-line 497, :end-column 19, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}, :factory :positional, :arglists (quote ([set left right keys idx]))}, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}, :name datascript.btset/->BTSetIter, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 19, :method-params ([set left right keys idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 497, :end-line 497, :max-fixed-arity 5, :fn-var true, :arglists (quote ([set left right keys idx])), :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}}, empty-path {:name datascript.btset/empty-path, :file "resources/out/datascript/btset.cljs", :line 48, :column 1, :end-line 48, :end-column 24, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 48, :column 14, :end-line 48, :end-column 24, :const true}}, alter-btset {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 717, :column 7, :end-line 717, :end-column 18, :arglists (quote ([set root shift cnt]))}, :name datascript.btset/alter-btset, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 18, :method-params ([set root shift cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 4, :fn-var true, :arglists (quote ([set root shift cnt]))}, btset-iter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 595, :column 7, :end-line 595, :end-column 17, :arglists (quote ([set])), :doc "Iterator that represents whole set"}, :name datascript.btset/btset-iter, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 17, :method-params ([set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 595, :end-line 595, :max-fixed-arity 1, :fn-var true, :arglists (quote ([set])), :doc "Iterator that represents whole set"}, path-mask {:name datascript.btset/path-mask, :file "resources/out/datascript/btset.cljs", :line 47, :column 1, :end-line 47, :end-column 23, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 47, :column 14, :end-line 47, :end-column 23, :const true}}, -distance {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 471, :column 7, :end-line 471, :end-column 16, :arglists (quote ([node left right level]))}, :name datascript.btset/-distance, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 16, :method-params ([node left right level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 471, :end-line 471, :max-fixed-arity 4, :fn-var true, :arglists (quote ([node left right level]))}, btset-conj {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 357, :column 7, :end-line 357, :end-column 17, :arglists (quote ([set key cmp]))}, :name datascript.btset/btset-conj, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 17, :method-params ([set key cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set key cmp]))}, ->LeafNode {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 298, :column 10, :end-line 298, :end-column 18, :protocols #{datascript.btset/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([keys]))}, :protocols #{datascript.btset/Object}, :name datascript.btset/->LeafNode, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 18, :method-params ([keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 298, :end-line 298, :max-fixed-arity 1, :fn-var true, :arglists (quote ([keys])), :skip-protocol-flag nil}, BTSetIter {:num-fields 5, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}, :name datascript.btset/BTSetIter, :file "resources/out/datascript/btset.cljs", :end-column 19, :type true, :column 10, :line 497, :record false, :end-line 497, :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IReduce}}, est-count {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 492, :column 7, :end-line 492, :end-column 16, :arglists (quote ([iter]))}, :name datascript.btset/est-count, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 16, :method-params ([iter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 1, :fn-var true, :arglists (quote ([iter]))}, -btset-iter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 556, :column 7, :end-line 556, :end-column 18, :arglists (quote ([set left right]))}, :name datascript.btset/-btset-iter, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 18, :method-params ([set left right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 556, :end-line 556, :max-fixed-arity 3, :fn-var true, :arglists (quote ([set left right]))}, path-set {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([path level idx]))}, :name datascript.btset/path-set, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 15, :method-params ([path level idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([path level idx]))}, cut-n-splice {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 102, :column 7, :end-line 102, :end-column 19, :arglists (quote ([arr cut-from cut-to splice-from splice-to xs]))}, :name datascript.btset/cut-n-splice, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 19, :method-params ([arr cut-from cut-to splice-from splice-to xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 6, :fn-var true, :arglists (quote ([arr cut-from cut-to splice-from splice-to xs]))}, ->BTSet {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 655, :column 10, :end-line 655, :end-column 15, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection datascript.btset/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([root shift cnt comparator meta __hash]))}, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection datascript.btset/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}, :name datascript.btset/->BTSet, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 15, :method-params ([root shift cnt comparator meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 655, :end-line 655, :max-fixed-arity 6, :fn-var true, :arglists (quote ([root shift cnt comparator meta __hash])), :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/ILookup}}, -btset-from-sorted-arr {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 720, :column 7, :end-line 720, :end-column 29, :arglists (quote ([arr cmp]))}, :name datascript.btset/-btset-from-sorted-arr, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 29, :method-params ([arr cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr cmp]))}, avg-len {:name datascript.btset/avg-len, :file "resources/out/datascript/btset.cljs", :line 42, :column 1, :end-line 42, :end-column 21, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 42, :column 14, :end-line 42, :end-column 21, :const true}}, ->Node {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 248, :column 10, :end-line 248, :end-column 14, :protocols #{datascript.btset/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([keys pointers]))}, :protocols #{datascript.btset/Object}, :name datascript.btset/->Node, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 14, :method-params ([keys pointers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 248, :end-line 248, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys pointers])), :skip-protocol-flag nil}, lookup-exact {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 82, :column 7, :end-line 82, :end-column 19, :arglists (quote ([arr key]))}, :name datascript.btset/lookup-exact, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 19, :method-params ([arr key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr key]))}, arr-partition-approx {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 171, :column 8, :end-line 171, :end-column 28, :private true, :arglists (quote ([min-len max-len arr])), :doc "Splits `arr` into arrays of size between min-len and max-len,\n   trying to stick to (min+max)/2"}, :private true, :name datascript.btset/arr-partition-approx, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 28, :method-params ([min-len max-len arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min-len max-len arr])), :doc "Splits `arr` into arrays of size between min-len and max-len,\n   trying to stick to (min+max)/2"}, return-array {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 213, :column 7, :end-line 213, :end-column 19, :arglists (quote ([a1] [a1 a2] [a1 a2 a3])), :doc "Drop non-nil references and return array of arguments", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a1] [a1 a2] [a1 a2 a3]), :arglists ([a1] [a1 a2] [a1 a2 a3]), :arglists-meta (nil nil nil)}}, :name datascript.btset/return-array, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a1] [a1 a2] [a1 a2 a3]), :arglists ([a1] [a1 a2] [a1 a2 a3]), :arglists-meta (nil nil nil)}, :method-params ([a1] [a1 a2] [a1 a2 a3]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 3, :fn-var true, :arglists ([a1] [a1 a2] [a1 a2 a3]), :doc "Drop non-nil references and return array of arguments"}, slice {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 645, :column 7, :end-line 645, :end-column 12, :arglists (quote ([set key] [set key-from key-to])), :doc "When called with single key, returns iterator over set that contains all elements equal to the key.\n   When called with two keys (range), returns iterator for all X where key-from <= X <= key-to", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([set key] [set key-from key-to]), :arglists ([set key] [set key-from key-to]), :arglists-meta (nil nil)}}, :name datascript.btset/slice, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([set key] [set key-from key-to]), :arglists ([set key] [set key-from key-to]), :arglists-meta (nil nil)}, :method-params ([set key] [set key-from key-to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 3, :fn-var true, :arglists ([set key] [set key-from key-to]), :doc "When called with single key, returns iterator over set that contains all elements equal to the key.\n   When called with two keys (range), returns iterator for all X where key-from <= X <= key-to"}, half {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([x]))}, :name datascript.btset/half, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, *cmp* {:name datascript.btset/*cmp*, :file "resources/out/datascript/btset.cljs", :line 49, :column 1, :end-line 49, :end-column 21, :dynamic true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 49, :column 16, :end-line 49, :end-column 21, :dynamic true}}, arr-map-inplace {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 163, :column 7, :end-line 163, :end-column 22, :arglists (quote ([f arr]))}, :name datascript.btset/arr-map-inplace, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 22, :method-params ([f arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f arr]))}, lookup-range {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 90, :column 7, :end-line 90, :end-column 19, :arglists (quote ([arr key]))}, :name datascript.btset/lookup-range, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 19, :method-params ([arr key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr key]))}, check-n-splice {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 158, :column 7, :end-line 158, :end-column 21, :arglists (quote ([arr from to new-arr]))}, :name datascript.btset/check-n-splice, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 21, :method-params ([arr from to new-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([arr from to new-arr]))}, rotate {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 219, :column 7, :end-line 219, :end-column 13, :arglists (quote ([node root? left right]))}, :name datascript.btset/rotate, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 13, :method-params ([node root? left right]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 4, :fn-var true, :arglists (quote ([node root? left right]))}, binary-search-l {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 62, :column 7, :end-line 62, :end-column 22, :arglists (quote ([arr l r k]))}, :name datascript.btset/binary-search-l, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 22, :method-params ([arr l r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 4, :fn-var true, :arglists (quote ([arr l r k]))}, Node {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 35, :column 16, :end-line 35, :end-column 20, :declared true}, :num-fields 2, :protocols #{datascript.btset/Object}, :name datascript.btset/Node, :file "resources/out/datascript/btset.cljs", :end-column 14, :type true, :column 10, :line 248, :record false, :declared true, :end-line 248, :skip-protocol-flag nil}, BTSetBackwardsIter {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 495, :column 10, :end-line 495, :end-column 28, :declared true}, :num-fields 5, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}, :name datascript.btset/BTSetBackwardsIter, :file "resources/out/datascript/btset.cljs", :end-column 28, :type true, :column 10, :line 559, :record false, :declared true, :end-line 559, :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}}, ->BTSetBackwardsIter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/btset.cljs", :line 559, :column 10, :end-line 559, :end-column 28, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}, :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}, :factory :positional, :arglists (quote ([set left right keys idx]))}, :protocols #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}, :name datascript.btset/->BTSetBackwardsIter, :variadic false, :file "resources/out/datascript/btset.cljs", :end-column 28, :method-params ([set left right keys idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 559, :end-line 559, :max-fixed-arity 5, :fn-var true, :arglists (quote ([set left right keys idx])), :skip-protocol-flag #{cljs.core/IReversible cljs.core/ISeq cljs.core/INext cljs.core/ISeqable}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc " B+ tree\n  -------\n\n  LeafNode: keys[]     :: array of values\n\n  Node:     pointers[] :: links to children nodes\n            keys[]     :: max value for whole subtree\n                          node.keys[i] == max(node.pointers[i].keys)\n  All arrays are 64..128 elements, inclusive\n\n  BTSet:    root       :: Node or LeafNode\n            shift      :: path bit-shift of root level, == (depth - 1) * level-shift\n            cnt        :: size of a set, integer, rolling\n            comparator :: comparator used for ordering\n            meta       :: clojure meta map\n            __hash     :: hash code, same as for clojure collections, on-demand, cached\n\n  Path: conceptually a vector of indexes from root to leaf value, but encoded in a single int.\n        E.g. we have path [7 53 11] representing root.pointers[7].pointers[3].keys[11].\n        In our case level-shift is 8, meaning each index will take 8 bits:\n        (7 << 16) | (53 << 8) | 11 = 472331\n        0000 0111   0011 0101   0000 1011\n\n  BTSetIter: set       :: Set this iterator belongs to\n             left      :: Current path\n             right     :: Right bound path (exclusive)\n             keys      :: Cached ref for keys array for a leaf\n             idx       :: Cached idx in keys array\n  Keys and idx are cached for fast iteration inside a leaf\n"}