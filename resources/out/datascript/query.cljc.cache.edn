;; Analyzed by ClojureScript 0.0-3299
{:use-macros {raise datascript.core}, :excludes #{}, :name datascript.query, :imports nil, :requires {set clojure.set, dpp datascript.pull-parser, dpa datascript.pull-api, dc datascript.core, walk clojure.walk, datascript.parser datascript.parser, datascript.core datascript.core, clojure.set clojure.set, datascript.pull-parser datascript.pull-parser, datascript.pull-api datascript.pull-api, de datascript.impl.entity, dp datascript.parser, cljs.reader cljs.reader, clojure.walk clojure.walk, edn cljs.reader, datascript.impl.entity datascript.impl.entity}, :uses {Constant datascript.parser, BindIgnore datascript.parser, FindTuple datascript.parser, SrcVar datascript.parser, FindColl datascript.parser, BindTuple datascript.parser, BindColl datascript.parser, BindScalar datascript.parser, PlainSymbol datascript.parser, FindRel datascript.parser, FindScalar datascript.parser, RulesVar datascript.parser, Variable datascript.parser}, :defs {solve-rule {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 535, :column 7, :end-line 535, :end-column 17, :arglists (quote ([context clause]))}, :name datascript.query/solve-rule, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, matches-pattern? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 389, :column 7, :end-line 389, :end-column 23, :arglists (quote ([pattern tuple]))}, :name datascript.query/matches-pattern?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 23, :method-params ([pattern tuple]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern tuple]))}, aggregate {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 703, :column 7, :end-line 703, :end-column 16, :arglists (quote ([find-elements context resultset]))}, :name datascript.query/aggregate, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([find-elements context resultset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 703, :end-line 703, :max-fixed-arity 3, :fn-var true, :arglists (quote ([find-elements context resultset]))}, query-cache {:name datascript.query/query-cache, :file "resources/out/datascript/query.cljc", :line 739, :column 1, :end-line 739, :end-column 27, :private true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 739, :column 16, :end-line 739, :end-column 27, :private true}}, rel-prod-by-attrs {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 438, :column 8, :end-line 438, :end-column 25, :private true, :arglists (quote ([context attrs]))}, :private true, :name datascript.query/rel-prod-by-attrs, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 25, :method-params ([context attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context attrs]))}, empty-rel {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 262, :column 7, :end-line 262, :end-column 16, :arglists (quote ([binding]))}, :name datascript.query/empty-rel, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([binding]))}, built-ins {:name datascript.query/built-ins, :file "resources/out/datascript/query.cljc", :line 179, :column 1, :end-line 179, :end-column 15, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 179, :column 6, :end-line 179, :end-column 15}}, pull {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 724, :column 8, :end-line 724, :end-column 12, :private true, :arglists (quote ([find-elements context resultset]))}, :private true, :name datascript.query/pull, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 12, :method-params ([find-elements context resultset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 3, :fn-var true, :arglists (quote ([find-elements context resultset]))}, ->Context {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 24, :column 12, :end-line 24, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([rels sources rules]))}, :name datascript.query/->Context, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([rels sources rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rels sources rules]))}, tuple-key-fn {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 335, :column 7, :end-line 335, :end-column 19, :arglists (quote ([getters]))}, :name datascript.query/tuple-key-fn, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([getters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([getters]))}, resolve-pattern-lookup-refs {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 591, :column 7, :end-line 591, :end-column 34, :arglists (quote ([source pattern]))}, :name datascript.query/resolve-pattern-lookup-refs, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 34, :method-params ([source pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 591, :end-line 591, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source pattern]))}, bind-by-fn {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 465, :column 7, :end-line 465, :end-column 17, :arglists (quote ([context clause]))}, :name datascript.query/bind-by-fn, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, resolve-in {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 304, :column 7, :end-line 304, :end-column 17, :arglists (quote ([context [binding value]]))}, :name datascript.query/resolve-in, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([context p__11796]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context [binding value]]))}, rule? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 485, :column 7, :end-line 485, :end-column 12, :arglists (quote ([context clause]))}, :name datascript.query/rule?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 12, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, source? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 63, :column 7, :end-line 63, :end-column 14, :arglists (quote ([sym]))}, :name datascript.query/source?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 14, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, -q {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 640, :column 7, :end-line 640, :end-column 9, :arglists (quote ([context clauses]))}, :name datascript.query/-q, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 9, :method-params ([context clauses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 640, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clauses]))}, attr? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([form]))}, :name datascript.query/attr?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 12, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, -get-else {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 160, :column 8, :end-line 160, :end-column 17, :private true, :arglists (quote ([db e a else-val]))}, :private true, :name datascript.query/-get-else, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([db e a else-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db e a else-val]))}, intersect-keys {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 36, :column 7, :end-line 36, :end-column 21, :arglists (quote ([attrs1 attrs2]))}, :name datascript.query/intersect-keys, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 21, :method-params ([attrs1 attrs2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs1 attrs2]))}, rule-seqid {:name datascript.query/rule-seqid, :file "resources/out/datascript/query.cljc", :line 495, :column 1, :end-line 495, :end-column 16, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 495, :column 6, :end-line 495, :end-column 16}}, -collect {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 643, :column 7, :end-line 643, :end-column 15, :arglists (quote ([context symbols] [acc rels symbols])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([context symbols] [acc rels symbols]), :arglists ([context symbols] [acc rels symbols]), :arglists-meta (nil nil)}}, :name datascript.query/-collect, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([context symbols] [acc rels symbols]), :arglists ([context symbols] [acc rels symbols]), :arglists-meta (nil nil)}, :method-params ([context symbols] [acc rels symbols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 643, :end-line 643, :max-fixed-arity 3, :fn-var true, :arglists ([context symbols] [acc rels symbols])}, q {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 748, :column 7, :end-line 748, :end-column 8, :arglists (quote ([q & inputs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(q inputs)], :arglists ([q & inputs]), :arglists-meta (nil)}}, :name datascript.query/q, :variadic true, :file "resources/out/datascript/query.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(q inputs)], :arglists ([q & inputs]), :arglists-meta (nil)}, :method-params [(q inputs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 748, :end-line 748, :max-fixed-arity 1, :fn-var true, :arglists ([q & inputs])}, context-resolve-val {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 430, :column 8, :end-line 430, :end-column 27, :private true, :arglists (quote ([context sym]))}, :private true, :name datascript.query/context-resolve-val, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 27, :method-params ([context sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context sym]))}, walk-collect {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 524, :column 7, :end-line 524, :end-column 19, :arglists (quote ([form pred]))}, :name datascript.query/walk-collect, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([form pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form pred]))}, lookup-pattern-coll {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 400, :column 7, :end-line 400, :end-column 26, :arglists (quote ([coll pattern]))}, :name datascript.query/lookup-pattern-coll, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 26, :method-params ([coll pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll pattern]))}, IBinding {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 267, :column 14, :end-line 267, :end-column 22, :doc nil, :protocol-symbol true, :protocol-info {:methods {in->rel [[binding value]]}}}, :protocol-symbol true, :name datascript.query/IBinding, :file "resources/out/datascript/query.cljc", :end-column 22, :column 1, :line 267, :protocol-info {:methods {in->rel [[binding value]]}}, :info nil, :end-line 267, :impls #{datascript.parser/BindColl datascript.parser/BindIgnore datascript.parser/BindScalar datascript.parser/BindTuple}, :doc nil}, IContextResolve {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 670, :column 14, :end-line 670, :end-column 29, :doc nil, :protocol-symbol true, :protocol-info {:methods {-context-resolve [[var context]]}}}, :protocol-symbol true, :name datascript.query/IContextResolve, :file "resources/out/datascript/query.cljc", :end-column 29, :column 1, :line 670, :protocol-info {:methods {-context-resolve [[var context]]}}, :info nil, :end-line 670, :impls #{datascript.parser/PlainSymbol datascript.parser/SrcVar datascript.parser/Constant datascript.parser/Variable}, :doc nil}, rule-gen-guards {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 517, :column 7, :end-line 517, :end-column 22, :arglists (quote ([rule-clause used-args]))}, :name datascript.query/rule-gen-guards, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 22, :method-params ([rule-clause used-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rule-clause used-args]))}, resolve-ins {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 315, :column 7, :end-line 315, :end-column 18, :arglists (quote ([context bindings values]))}, :name datascript.query/resolve-ins, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 18, :method-params ([context bindings values]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context bindings values]))}, remove-pairs {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 511, :column 7, :end-line 511, :end-column 19, :arglists (quote ([xs ys]))}, :name datascript.query/remove-pairs, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([xs ys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 511, :end-line 511, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xs ys]))}, lru-cache-size {:name datascript.query/lru-cache-size, :file "resources/out/datascript/query.cljc", :line 19, :column 1, :end-line 19, :end-column 28, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 19, :column 14, :end-line 19, :end-column 28, :const true}}, concatv {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name datascript.query/concatv, :variadic true, :file "resources/out/datascript/query.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, -missing? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 175, :column 8, :end-line 175, :end-column 17, :private true, :arglists (quote ([db e a]))}, :private true, :name datascript.query/-missing?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([db e a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db e a]))}, rel-contains-attrs? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 435, :column 8, :end-line 435, :end-column 27, :private true, :arglists (quote ([rel attrs]))}, :private true, :name datascript.query/rel-contains-attrs?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 27, :method-params ([rel attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rel attrs]))}, ->LRU {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 80, :column 13, :end-line 80, :end-column 16, :protocols #{datascript.query/Object cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}, :factory :positional, :arglists (quote ([key-value gen-key key-gen gen limit]))}, :protocols #{datascript.query/Object cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}, :name datascript.query/->LRU, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([key-value gen-key key-gen gen limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :factory :positional, :line 80, :end-line 80, :max-fixed-arity 5, :fn-var true, :arglists (quote ([key-value gen-key key-gen gen limit])), :skip-protocol-flag #{cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}}, prod-rel {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 136, :column 7, :end-line 136, :end-column 15, :arglists (quote ([] [rel1 rel2])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [rel1 rel2]), :arglists ([] [rel1 rel2]), :arglists-meta (nil nil)}}, :name datascript.query/prod-rel, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [rel1 rel2]), :arglists ([] [rel1 rel2]), :arglists-meta (nil nil)}, :method-params ([] [rel1 rel2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists ([] [rel1 rel2])}, lookup-pattern {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 412, :column 7, :end-line 412, :end-column 21, :arglists (quote ([source pattern]))}, :name datascript.query/lookup-pattern, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 21, :method-params ([source pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source pattern]))}, -aggregate {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 687, :column 7, :end-line 687, :end-column 17, :arglists (quote ([find-elements context tuples]))}, :name datascript.query/-aggregate, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([find-elements context tuples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 3, :fn-var true, :arglists (quote ([find-elements context tuples]))}, -resolve-clause {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 612, :column 7, :end-line 612, :end-column 22, :arglists (quote ([context clause]))}, :name datascript.query/-resolve-clause, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 22, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 612, :end-line 612, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, *lookup-attrs* {:name datascript.query/*lookup-attrs*, :file "resources/out/datascript/query.cljc", :line 320, :column 1, :end-line 320, :end-column 30, :dynamic true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 320, :column 16, :end-line 320, :end-column 30, :dynamic true}}, ->Relation {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 31, :column 12, :end-line 31, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([attrs tuples]))}, :name datascript.query/->Relation, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 20, :method-params ([attrs tuples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs tuples]))}, join-tuples {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 123, :column 7, :end-line 123, :end-column 18, :arglists (quote ([t1 idxs1 t2 idxs2]))}, :name datascript.query/join-tuples, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 18, :method-params ([t1 idxs1 t2 idxs2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t1 idxs1 t2 idxs2]))}, IPostProcess {:meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 711, :column 14, :end-line 711, :end-column 26, :doc nil, :protocol-symbol true, :protocol-info {:methods {-post-process [[find tuples]]}}}, :protocol-symbol true, :name datascript.query/IPostProcess, :file "resources/out/datascript/query.cljc", :end-column 26, :column 1, :line 711, :protocol-info {:methods {-post-process [[find tuples]]}}, :info nil, :end-line 711, :impls #{datascript.parser/FindScalar datascript.parser/FindRel datascript.parser/FindTuple datascript.parser/FindColl}, :doc nil}, looks-like? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 43, :column 8, :end-line 43, :end-column 19, :private true, :arglists (quote ([pattern form]))}, :private true, :name datascript.query/looks-like?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([pattern form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern form]))}, dynamic-lookup-attrs {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 602, :column 7, :end-line 602, :end-column 27, :arglists (quote ([source pattern]))}, :name datascript.query/dynamic-lookup-attrs, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 27, :method-params ([source pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 602, :end-line 602, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source pattern]))}, lookup-ref? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 74, :column 7, :end-line 74, :end-column 18, :arglists (quote ([form]))}, :name datascript.query/lookup-ref?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 18, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, in->rel {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 268, :column 4, :end-line 268, :end-column 11, :protocol datascript.query/IBinding, :doc nil, :arglists (quote ([binding value]))}, :protocol datascript.query/IBinding, :name datascript.query/in->rel, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 11, :method-params ([binding value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([binding value])), :doc nil}, -get-some {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 166, :column 8, :end-line 166, :end-column 17, :private true, :arglists (quote ([db e & as])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db e as)], :arglists ([db e & as]), :arglists-meta (nil)}}, :private true, :name datascript.query/-get-some, :variadic true, :file "resources/out/datascript/query.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db e as)], :arglists ([db e & as]), :arglists-meta (nil)}, :method-params [(db e as)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists ([db e & as])}, expand-rule {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 497, :column 7, :end-line 497, :end-column 18, :arglists (quote ([clause context used-args]))}, :name datascript.query/expand-rule, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 18, :method-params ([clause context used-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 497, :end-line 497, :max-fixed-arity 3, :fn-var true, :arglists (quote ([clause context used-args]))}, resolve-clause {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 630, :column 7, :end-line 630, :end-column 21, :arglists (quote ([context clause]))}, :name datascript.query/resolve-clause, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 21, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 630, :end-line 630, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, hash-join {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 352, :column 7, :end-line 352, :end-column 16, :arglists (quote ([rel1 rel2]))}, :name datascript.query/hash-join, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([rel1 rel2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rel1 rel2]))}, -call-fn {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 443, :column 7, :end-line 443, :end-column 15, :arglists (quote ([context rel f args]))}, :name datascript.query/-call-fn, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 15, :method-params ([context rel f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 4, :fn-var true, :arglists (quote ([context rel f args]))}, parse-rules {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 255, :column 7, :end-line 255, :end-column 18, :arglists (quote ([rules]))}, :name datascript.query/parse-rules, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 18, :method-params ([rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rules]))}, lru {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 117, :column 7, :end-line 117, :end-column 10, :arglists (quote ([limit]))}, :name datascript.query/lru, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 10, :method-params ([limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([limit]))}, memoized-parse-query {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 741, :column 7, :end-line 741, :end-column 27, :arglists (quote ([q]))}, :name datascript.query/memoized-parse-query, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 27, :method-params ([q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 1, :fn-var true, :arglists (quote ([q]))}, built-in-aggregates {:name datascript.query/built-in-aggregates, :file "resources/out/datascript/query.cljc", :line 186, :column 1, :end-line 186, :end-column 25, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 186, :column 6, :end-line 186, :end-column 25}}, Context {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name datascript.query/Context, :file "resources/out/datascript/query.cljc", :end-column 19, :type true, :column 12, :internal-ctor true, :line 24, :record true, :end-line 24, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, LRU {:num-fields 5, :protocols #{datascript.query/Object cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}, :name datascript.query/LRU, :file "resources/out/datascript/query.cljc", :end-column 16, :type true, :column 13, :line 80, :record false, :end-line 80, :skip-protocol-flag #{cljs.core/IPrintWithWriter cljs.core/IAssociative cljs.core/ILookup}}, sum-rel {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([a b]))}, :name datascript.query/sum-rel, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 14, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, free-var? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 67, :column 7, :end-line 67, :end-column 16, :arglists (quote ([sym]))}, :name datascript.query/free-var?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, map->Context {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 24, :column 12, :end-line 24, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__11722]))}, :name datascript.query/map->Context, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([G__11722]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__11722]))}, -context-resolve {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 671, :column 4, :end-line 671, :end-column 20, :protocol datascript.query/IContextResolve, :doc nil, :arglists (quote ([var context]))}, :protocol datascript.query/IContextResolve, :name datascript.query/-context-resolve, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 20, :method-params ([var context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 670, :end-line 671, :max-fixed-arity 2, :fn-var true, :arglists (quote ([var context])), :doc nil}, *lookup-source* {:name datascript.query/*lookup-source*, :file "resources/out/datascript/query.cljc", :line 321, :column 1, :end-line 321, :end-column 31, :dynamic true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 321, :column 16, :end-line 321, :end-column 31, :dynamic true}}, Relation {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name datascript.query/Relation, :file "resources/out/datascript/query.cljc", :end-column 20, :type true, :column 12, :internal-ctor true, :line 31, :record true, :end-line 31, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, filter-by-pred {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 454, :column 7, :end-line 454, :end-column 21, :arglists (quote ([context clause]))}, :name datascript.query/filter-by-pred, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 21, :method-params ([context clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context clause]))}, split-guards {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 529, :column 7, :end-line 529, :end-column 19, :arglists (quote ([clauses guards]))}, :name datascript.query/split-guards, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 19, :method-params ([clauses guards]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clauses guards]))}, normalize-pattern-clause {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 407, :column 7, :end-line 407, :end-column 31, :arglists (quote ([clause]))}, :name datascript.query/normalize-pattern-clause, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 31, :method-params ([clause]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 407, :max-fixed-arity 1, :fn-var true, :arglists (quote ([clause]))}, collect {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 665, :column 7, :end-line 665, :end-column 14, :arglists (quote ([context symbols]))}, :name datascript.query/collect, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 14, :method-params ([context symbols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context symbols]))}, map->Relation {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 31, :column 12, :end-line 31, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__11730]))}, :name datascript.query/map->Relation, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 20, :method-params ([G__11730]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__11730]))}, bindable-to-seq? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 259, :column 7, :end-line 259, :end-column 23, :arglists (quote ([x]))}, :name datascript.query/bindable-to-seq?, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -differ? {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 156, :column 8, :end-line 156, :end-column 16, :private true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :private true, :name datascript.query/-differ?, :variadic true, :file "resources/out/datascript/query.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, hash-attrs {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 343, :column 7, :end-line 343, :end-column 17, :arglists (quote ([key-fn tuples]))}, :name datascript.query/hash-attrs, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([key-fn tuples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-fn tuples]))}, lookup-pattern-db {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 380, :column 7, :end-line 380, :end-column 24, :arglists (quote ([db pattern]))}, :name datascript.query/lookup-pattern-db, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 24, :method-params ([db pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db pattern]))}, -post-process {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 712, :column 4, :end-line 712, :end-column 17, :protocol datascript.query/IPostProcess, :doc nil, :arglists (quote ([find tuples]))}, :protocol datascript.query/IPostProcess, :name datascript.query/-post-process, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 17, :method-params ([find tuples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 711, :end-line 712, :max-fixed-arity 2, :fn-var true, :arglists (quote ([find tuples])), :doc nil}, collapse-rels {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 419, :column 7, :end-line 419, :end-column 20, :arglists (quote ([rels new-rel]))}, :name datascript.query/collapse-rels, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 20, :method-params ([rels new-rel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rels new-rel]))}, idxs-of {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 699, :column 8, :end-line 699, :end-column 15, :private true, :arglists (quote ([pred coll]))}, :private true, :name datascript.query/idxs-of, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 15, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, getter-fn {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript/query.cljc", :line 323, :column 7, :end-line 323, :end-column 16, :arglists (quote ([attrs attr]))}, :name datascript.query/getter-fn, :variadic false, :file "resources/out/datascript/query.cljc", :end-column 16, :method-params ([attrs attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs attr]))}}, :require-macros {dc datascript.core, datascript.core datascript.core, dp datascript.parser, datascript.parser datascript.parser}, :cljs.analyzer/constants {:seen #{:used-args :args :find :tuples :where :fn :else :symbol :sources :query/binding :value :prefix-context :rules :rels :binding :with :pending-guards :attrs :error :clauses :prefix-clauses :in}, :order [:rels :sources :rules :attrs :tuples :else :symbol :error :value :binding :query/binding :prefix-clauses :prefix-context :clauses :used-args :pending-guards :fn :args :find :with :where :in]}, :doc nil}