;; Analyzed by ClojureScript 0.0-3299
{:use-macros nil, :excludes #{filter}, :name datascript, :imports nil, :requires {datascript.query datascript.query, btset datascript.btset, dc datascript.core, datascript.core datascript.core, datascript.btset datascript.btset, dq datascript.query, datascript.pull-api datascript.pull-api, de datascript.impl.entity, dp datascript.pull-api, datascript.impl.entity datascript.impl.entity}, :uses {FilteredDB datascript.core}, :defs {->t11140 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([conn tx-data p__11138 vec__11139 tx-meta res meta11141])), :file nil}, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/->t11140, :variadic false, :file "resources/out/datascript.cljc", :method-params ([conn tx-data p__11138 vec__11139 tx-meta res meta11141]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 130, :max-fixed-arity 7, :fn-var true, :arglists (quote ([conn tx-data p__11138 vec__11139 tx-meta res meta11141])), :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, pull {:name datascript/pull, :file "resources/out/datascript.cljc", :line 19, :column 1, :end-line 19, :end-column 11, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 19, :column 7, :end-line 19, :end-column 11}}, listen! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 83, :column 7, :end-line 83, :end-column 14, :arglists (quote ([conn callback] [conn key callback])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([conn callback] [conn key callback]), :arglists ([conn callback] [conn key callback]), :arglists-meta (nil nil)}}, :name datascript/listen!, :variadic false, :file "resources/out/datascript.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([conn callback] [conn key callback]), :arglists ([conn callback] [conn key callback]), :arglists-meta (nil nil)}, :method-params ([conn callback] [conn key callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists ([conn callback] [conn key callback])}, future-call {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 148, :column 11, :end-line 148, :end-column 22, :private true, :arglists (quote ([f]))}, :private true, :name datascript/future-call, :variadic false, :file "resources/out/datascript.cljc", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, entity {:name datascript/entity, :file "resources/out/datascript.cljc", :line 14, :column 1, :end-line 14, :end-column 13, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 14, :column 7, :end-line 14, :end-column 13}}, to-hex-string {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 166, :column 8, :end-line 166, :end-column 21, :private true, :arglists (quote ([n l]))}, :private true, :name datascript/to-hex-string, :variadic false, :file "resources/out/datascript.cljc", :end-column 21, :method-params ([n l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n l]))}, datoms {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([db index & cs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index cs)], :arglists ([db index & cs]), :arglists-meta (nil)}}, :name datascript/datoms, :variadic true, :file "resources/out/datascript.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index cs)], :arglists ([db index & cs]), :arglists-meta (nil)}, :method-params [(db index cs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists ([db index & cs])}, init-db {:name datascript/init-db, :file "resources/out/datascript.cljc", :line 24, :column 1, :end-line 24, :end-column 14, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 24, :column 7, :end-line 24, :end-column 14}}, t11146 {:num-fields 5, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/t11146, :file "resources/out/datascript.cljc", :type true, :anonymous true, :column 8, :line 152, :record false, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, is-filtered {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 31, :column 7, :end-line 31, :end-column 18, :arglists (quote ([x]))}, :name datascript/is-filtered, :variadic false, :file "resources/out/datascript.cljc", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, q {:name datascript/q, :file "resources/out/datascript.cljc", :line 13, :column 1, :end-line 13, :end-column 8, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 13, :column 7, :end-line 13, :end-column 8}}, index-range {:name datascript/index-range, :file "resources/out/datascript.cljc", :line 59, :column 1, :end-line 59, :end-column 17, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 59, :column 6, :end-line 59, :end-column 17}}, pull-many {:name datascript/pull-many, :file "resources/out/datascript.cljc", :line 20, :column 1, :end-line 20, :end-column 16, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 20, :column 7, :end-line 20, :end-column 16}}, squuid {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 174, :column 7, :end-line 174, :end-column 13, :arglists (quote ([]))}, :name datascript/squuid, :variadic false, :file "resources/out/datascript.cljc", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, db? {:name datascript/db?, :file "resources/out/datascript.cljc", :line 27, :column 1, :end-line 27, :end-column 10, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 27, :column 7, :end-line 27, :end-column 10}}, create-conn {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([& [schema]])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([schema])], :arglists ([& [schema]]), :arglists-meta (nil)}}, :name datascript/create-conn, :variadic true, :file "resources/out/datascript.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([schema])], :arglists ([& [schema]]), :arglists-meta (nil)}, :method-params [([schema])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists ([& [schema]])}, squuid-time-millis {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 194, :column 7, :end-line 194, :end-column 25, :arglists (quote ([uuid]))}, :name datascript/squuid-time-millis, :variadic false, :file "resources/out/datascript.cljc", :end-column 25, :method-params ([uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uuid]))}, datom {:name datascript/datom, :file "resources/out/datascript.cljc", :line 17, :column 1, :end-line 17, :end-column 12, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 17, :column 7, :end-line 17, :end-column 12}}, entity-db {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([entity]))}, :name datascript/entity-db, :variadic false, :file "resources/out/datascript.cljc", :end-column 16, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, db {:name datascript/db, :file "resources/out/datascript.cljc", :line 125, :column 1, :end-line 125, :end-column 8, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 125, :column 6, :end-line 125, :end-column 8}}, transact-async {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 160, :column 7, :end-line 160, :end-column 21, :arglists (quote ([conn tx-data & [tx-meta]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}}, :name datascript/transact-async, :variadic true, :file "resources/out/datascript.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}, :method-params [(conn tx-data [tx-meta])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists ([conn tx-data & [tx-meta]])}, ->t11143 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([future-call f res realized meta11144])), :file nil}, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/->t11143, :variadic false, :file "resources/out/datascript.cljc", :method-params ([future-call f res realized meta11144]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 152, :max-fixed-arity 5, :fn-var true, :arglists (quote ([future-call f res realized meta11144])), :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, data-readers {:name datascript/data-readers, :file "resources/out/datascript.cljc", :line 101, :column 1, :end-line 101, :end-column 18, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 101, :column 6, :end-line 101, :end-column 18}}, tx0 {:name datascript/tx0, :file "resources/out/datascript.cljc", :line 29, :column 1, :end-line 29, :end-column 17, :const true, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 29, :column 14, :end-line 29, :end-column 17, :const true}}, t11140 {:num-fields 7, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/t11140, :file "resources/out/datascript.cljc", :type true, :anonymous true, :column 8, :line 130, :record false, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, resolve-tempid {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 122, :column 7, :end-line 122, :end-column 21, :arglists (quote ([_db tempids tempid]))}, :name datascript/resolve-tempid, :variadic false, :file "resources/out/datascript.cljc", :end-column 21, :method-params ([_db tempids tempid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_db tempids tempid]))}, empty-db {:name datascript/empty-db, :file "resources/out/datascript.cljc", :line 23, :column 1, :end-line 23, :end-column 15, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 23, :column 7, :end-line 23, :end-column 15}}, datom? {:name datascript/datom?, :file "resources/out/datascript.cljc", :line 26, :column 1, :end-line 26, :end-column 13, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 26, :column 7, :end-line 26, :end-column 13}}, transact! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([conn tx-data & [tx-meta]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}}, :name datascript/transact!, :variadic true, :file "resources/out/datascript.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}, :method-params [(conn tx-data [tx-meta])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists ([conn tx-data & [tx-meta]])}, transact {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 127, :column 7, :end-line 127, :end-column 15, :arglists (quote ([conn tx-data & [tx-meta]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}}, :name datascript/transact, :variadic true, :file "resources/out/datascript.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(conn tx-data [tx-meta])], :arglists ([conn tx-data & [tx-meta]]), :arglists-meta (nil)}, :method-params [(conn tx-data [tx-meta])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists ([conn tx-data & [tx-meta]])}, ->t11146 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([future-call f res realized meta11147])), :file nil}, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/->t11146, :variadic false, :file "resources/out/datascript.cljc", :method-params ([future-call f res realized meta11147]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 152, :max-fixed-arity 5, :fn-var true, :arglists (quote ([future-call f res realized meta11147])), :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, seek-datoms {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 56, :column 7, :end-line 56, :end-column 18, :arglists (quote ([db index & cs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index cs)], :arglists ([db index & cs]), :arglists-meta (nil)}}, :name datascript/seek-datoms, :variadic true, :file "resources/out/datascript.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db index cs)], :arglists ([db index & cs]), :arglists-meta (nil)}, :method-params [(db index cs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists ([db index & cs])}, filter {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([db pred]))}, :name datascript/filter, :variadic false, :file "resources/out/datascript.cljc", :end-column 13, :method-params ([db pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db pred]))}, last-tempid {:name datascript/last-tempid, :file "resources/out/datascript.cljc", :line 110, :column 1, :end-line 110, :end-column 17, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 110, :column 6, :end-line 110, :end-column 17}}, rand-bits {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 163, :column 8, :end-line 163, :end-column 17, :private true, :arglists (quote ([pow]))}, :private true, :name datascript/rand-bits, :variadic false, :file "resources/out/datascript.cljc", :end-column 17, :method-params ([pow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pow]))}, db-with {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([db tx-data]))}, :name datascript/db-with, :variadic false, :file "resources/out/datascript.cljc", :end-column 14, :method-params ([db tx-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db tx-data]))}, unlisten! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 89, :column 7, :end-line 89, :end-column 16, :arglists (quote ([conn key]))}, :name datascript/unlisten!, :variadic false, :file "resources/out/datascript.cljc", :end-column 16, :method-params ([conn key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn key]))}, with {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 40, :column 7, :end-line 40, :end-column 11, :arglists (quote ([db tx-data & [tx-meta]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db tx-data [tx-meta])], :arglists ([db tx-data & [tx-meta]]), :arglists-meta (nil)}}, :name datascript/with, :variadic true, :file "resources/out/datascript.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(db tx-data [tx-meta])], :arglists ([db tx-data & [tx-meta]]), :arglists-meta (nil)}, :method-params [(db tx-data [tx-meta])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists ([db tx-data & [tx-meta]])}, touch {:name datascript/touch, :file "resources/out/datascript.cljc", :line 21, :column 1, :end-line 21, :end-column 12, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 21, :column 7, :end-line 21, :end-column 12}}, t11143 {:num-fields 5, :protocols #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name datascript/t11143, :file "resources/out/datascript.cljc", :type true, :anonymous true, :column 8, :line 152, :record false, :skip-protocol-flag #{cljs.core/IDerefWithTimeout cljs.core/IPending cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, entid {:name datascript/entid, :file "resources/out/datascript.cljc", :line 61, :column 1, :end-line 61, :end-column 11, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 61, :column 6, :end-line 61, :end-column 11}}, tempid {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 112, :column 7, :end-line 112, :end-column 13, :arglists (quote ([part] [part x])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [part x]), :arglists ([part] [part x]), :arglists-meta (nil nil)}}, :name datascript/tempid, :variadic false, :file "resources/out/datascript.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([part] [part x]), :arglists ([part] [part x]), :arglists-meta (nil nil)}, :method-params ([part] [part x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists ([part] [part x])}, -transact! {:protocol-inline nil, :meta {:file "/Users/davidnolen/development/clojure/om-datascript/resources/out/datascript.cljc", :line 69, :column 7, :end-line 69, :end-column 17, :arglists (quote ([conn tx-data tx-meta]))}, :name datascript/-transact!, :variadic false, :file "resources/out/datascript.cljc", :end-column 17, :method-params ([conn tx-data tx-meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists (quote ([conn tx-data tx-meta]))}}, :require-macros {dc datascript.core, datascript.core datascript.core}, :cljs.analyzer/constants {:seen #{:tempids :meta :else :db-after :transaction/filtered :db-before :tx-data :db.part/tx :db/current-tx :error :uuid :tx-meta :listeners}, :order [:error :transaction/filtered :db-before :db-after :tx-data :tempids :tx-meta :meta :listeners :db.part/tx :db/current-tx :else :uuid]}, :doc nil}